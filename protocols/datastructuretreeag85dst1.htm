<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <title>Data structure tree AG85DST1 by Arthur Golubev 19850316</title>
    <meta name="keywords" content="data structure tree ag85dst1, by Arthur Golubev 19850316 data structure tree ag85dst1"/>
    <meta name="robots" content="index,follow"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="icon" href="/logos/sitelogo1.svg" type="image/svg+xml">
    <meta name="description" content="By Arthur Golubev 19850316 (ArthurGolubev19850316) data structure tree ag85dst1."/>
    <meta name="changed" content="2025-03-06T18:00:00"/>
  </head>
  <body lang="en-US" link="#000080" vlink="#800000" dir="ltr">
	  <header>
		  Site path links list: 
		  <a href="/">starting page of the site<a/>
		  |
		  <a href="/protocols.htm">Protocols<a/>
		  .
	  </header>
    <p>Original Internet address of this content: <a href="www.ag85.site/protocols/datastructuretreeag85dst1.htm">www.ag85.site/protocols/datastructuretreeag85dst1.htm</a></p>
	  <h3>By Arthur Golubev 19850316 data structure tree ag85dst1</h3>
	  <p>
	  AG85DST1 is data structure of the following: every link contains two values which can be either pointers or naught values: if a link has a marking zero-value descender the first value points to the marking zero-value descender link and in another case is naught value, if a link has a marking one-value descender the second value points to that marking one-value descender and in another case is naught value and links are joined so that link-by-link paths link-by-link bit-by-bit represents bits presentation of values.
	  </p>
	  <p>
  Without modifications such data structure is efficient for storing collections, if in links which potentially are terminal for a value to add flags whether the link is terminal for a value or not and space for a value then is efficient for storing dictionaries and is efficient for ordering elements (it requires only putting values into the tree and reading in either zero-first or one-first depth-first order them).
	  </p>
	  <p>
  There is published in 2025-02-26 code with using the data structure which demonstrates idea of ordering using this data structure in public repository services github.com (<a href="https://github.com/ArthurGolubev1985/FastOrderingIdeaDemo">https://github.com/ArthurGolubev1985/FastOrderingIdeaDemo</a>), codeberg.org (<a href="https://codeberg.org/ArthurGolubev1985/FastOrderingIdeaDemo">https://codeberg.org/ArthurGolubev1985/FastOrderingIdeaDemo</a>) and gitflic.ru (<a href="https://gitflic.ru/project/arturische/fastorderingideademo">https://gitflic.ru/project/arturische/fastorderingideademo</a>).
	  </p>
  </body>
</html>
