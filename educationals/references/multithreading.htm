<!DOCTYPE html>
<html>
  <head>
      <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
      <title>Summary on multithreading by Arthur Golubev 19850316</title>
      <meta name="keywords" content="multithreading, multithreading reference, by Arthur Golubev 19850316 multithreading reference"/>
      <meta name="robots" content="index,follow"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
      <link rel="icon" href="/logos/sitelogo1.svg" type="image/svg+xml">
      <meta name="description" content="By Arthur Golubev 19850316 (ArthurGolubev19850316) summary on multithreading."/>
      <meta name="changed" content="2025-07-06T17:30:00"/>
  </head>
  <body lang="en-US" link="#000080" vlink="#800000" dir="ltr">
	  <header>
		  Site path links list: 
		  <a href="/">starting page of the site<a/>
		  | 
		  <a href="/educationals.htm">Educationals<a/>
		  .
	  </header>
    <p>Original Internet address of this content: <a href="https://www.ag85.site/educationals/references/multithreading.htm">https://www.ag85.site/educationals/references/multithreading.htm</a></p>
    <h1>Summary on multithreading<br/>By Arthur Golubev 19850316<br/>from 2024-11-16</h1>
	  <ul>
		  <li>
			  Downloadable documents:
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.odt">odt</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.rtf">rtf</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.pdf">pdf</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.epub">epub</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.htm">htm</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.doc">doc</a>;
			  <a target="_blank" download href="/textdocuments/Summary on multithreading by Arthur Golubev 19850316.txt">txt</a>;
		  </li>
		  <li>
			  Online documents:
			  <a target="_blank" download href="https://docs.google.com/document/d/1WWn1lmWdbcHFrzQ915M_dQhmtA781-XYOdeNLXepqoA">at Googledocs</a>;
			  <a target="_blank" download href="https://www.dropbox.com/scl/fi/snvepvb9l5sgonp7bznri">at Dropboxpaper</a>;
		  </li>
	  </ul>
<div id="Table of Contents1" dir="ltr">
	<div id="Table of Contents1_Head" dir="ltr"><p style="line-height: 100%; margin-top: 0.17in; margin-bottom: 0.08in; page-break-after: avoid">
		<font face="Liberation Sans, sans-serif"><font size="4" style="font-size: 16pt"><b>Table
		of Contents</b></font></font></p>
	</div>
	<p style="line-height: 100%; margin-bottom: 0in"><a href="#__RefHeading___Toc77_89898606">1:
	Threads	1</a></p>
	<p style="line-height: 100%; margin-bottom: 0in"><a href="#__RefHeading___Toc93_89898606%20Copy%201">2:
	Things to consider on multithreading	2</a></p>
	<p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	<a href="#__RefHeading___Toc81_89898606">2.1: Keeping correctness of
	data when multithreading	2</a></p>
	<p style="line-height: 100%; margin-left: 0.39in; margin-bottom: 0in">
	<a href="#__RefHeading___Toc83_89898606">2.1.1: Problem of
	nonatomicity of some operations	2</a></p>
	<p style="line-height: 100%; margin-left: 0.39in; margin-bottom: 0in">
	<a href="#__RefHeading___Toc85_89898606">2.1.2: Avoiding
	inappropriate accesses to shared data	2</a></p>
	<p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	<a href="#__RefHeading___Toc899_3561902385">2.2: Thread pools	3</a></p>
</div>
<p style="line-height: 100%; margin-bottom: 0in"><br/>

</p>
<h1 class="western"><a name="__RefHeading___Toc77_89898606"></a>1:
Threads</h1>
<p>Every program is a set of commands which also can be called
instructions; for example, to calculate something, to signal to a
device, to read from a channel. Some actions cannot happen
simultaneously; for example, when we want to calculate something and
then send it to an output device, calculating must be completed
before sending this result to an output device; and some actions can
happen simultaneously, for example providing result of previous
calculations to an output device and performing next calculations.
Also, what actions can be performed simultaneously depends on what
apparatuses can perform simultaneously.</p>
<p>Program commands can be organized into set of sequences of
commands that depend on each other only by shared data; such
sequences are called threads. Some resources and information can be
associated with a thread; for examples, thread memory or security
access information, respectively.</p>
<p>Number of threads that an apparatus can perform simultaneously may
be less than occasionally is current number of threads of a program,
then some dispatching of thread over apparatus resources is required;
replacing a thread to switch apparatus resources to another thread
can be done:</p>
<p>- by a thread itself (a thread itself calls commands of switching
to another thread);</p>
<p>- forcedly to a thread: by either hardware or operating system.</p>
<h1 class="western"><a name="__RefHeading___Toc93_89898606 Copy 1"></a>
2: Things to consider on multithreading</h1>
<h2 class="western"><a name="__RefHeading___Toc81_89898606"></a>2.1:
Keeping correctness of data when multithreading</h2>
<h3 class="western"><a name="__RefHeading___Toc83_89898606"></a>2.1.1:
Problem of nonatomicity of some operations</h3>
<p>Atomicity of an operation in a system means that the operation in
the system cannot be broken into parts.</p>
<p>If a threads reads or modifies shared data by nonatomic operations
simultaneously with another thread is modifying the shared data,
these operations can be performed with corrupting values.</p>
<p>An example of such corruption of value because of absence of
atomicity follows. In this example of corruption of values because of
absence of atomicity will be used term byte; word byte means a
portion of information that has its own address in a system.</p>
<p>Imagine that a program needs to operate a variable number of
diverse values of which is more than number of diverse values of a
byte. Lets consider in the system the possible number of values in a
byte is 256 an we need to operate a piece of data which fits in
minimum two bytes. Common way to store such piece of data in two such
bytes is storing units in the one of the byte with weight 256 (so
that contribution of this byte is its value * 256) and units the
another with weight 1 (so that contribution of this byte is 1). Lets
consider we decided that units of the first byte weights 256 and
units of the second byte weights 1. Lets consider and we want the
initial value is 515; then in the first byte would be placed 2 and in
the second byte would be placed 3 (the total contribution would be
256 * 2 + 1 * 3 = 515).  Lets consider a situation that one of
threads is reading the bytes and another is changing the value to a 0
so that after the first threads has read the first byte, the second 
thread changed both bytes to 0. Completing the operations the first
thread reads the second byte so that for it the bytes values will be
0 and 3 which means value 256 * 0 + 3 * 1 = 3 which is neither
initial, 515, nor set by the second of the threads 0 value.</p>
<h3 class="western"><a name="__RefHeading___Toc85_89898606"></a>2.1.2:
Avoiding inappropriate accesses to shared data</h3>
<p>Some operations are naturally atomic according to design of the
system; for examples:</p>
<p>- as apparatus constructed changing apparatus flag is performed an
operation per apparatus tick so that next operation just cannot start
until the previous operation has completed because the next tick has
not yet started;</p>
<p>- as apparatus constructed commands of changing state in a device
are transferred via a single bus to the device so that can pass only
one by one.</p>
<p>On level of apparatuses, lets call memory atomic for the
operations if these operations for this memory are atomic. On level
of programs, lets call variables atomic for the operations if these
operations for this variable are atomic.</p>
<p>Variable that indicates some state is called flag.</p>
<p>If it is appropriate to the system, program can just store a value
it operates by threads in atomic memory.</p>
<p>Another option is using an atomic flag per shared data to indicate
that one of operations which we want to not be performed
simultaneously either is going to start or has completed; then
threads can check the atomic flag and decide whether to start their
operations on the shared data or wait until a concurrent operation
has completed. It is an option how many data protect with a flag; it
designed has to be considered how expensive working with flags is,
how expensive storing flags is and how expensive changing data
structure is.</p>
<p>In case of access to the atomic memory happens through cache
memory either automatic or by commands managing of correct updating
the atomic memory and caches is required.</p>
<p>There is a trick when data is accessed through a pointer, to
protect access by an atomic flag only for the pointer and rather than
update data create a new instance and then redirect the pointer to
the new instance.</p>
<h2 class="western"><a name="__RefHeading___Toc899_3561902385"></a>2.2:
Thread pools</h2>
<p>When apparatus or operating system switches what thread it is
running it costs and when a program creates and deletes information
associated with threads it costs. It may happen to be cheaper to
create threads which dispatch and perform pieces of code of tasks
rather than to dispatch threads for tasks and create and delete
information associated with the threads for tasks.</p>
<br/>  
  </body>
</html>
