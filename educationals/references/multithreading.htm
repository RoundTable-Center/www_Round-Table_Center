<!DOCTYPE html>
<html>
  <head>
      <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
      <title>Reference on multithreading by Arthur Golubev 19850316</title>
      <meta name="keywords" content="multithreading, multithreading reference, by Arthur Golubev 19850316 multithreading reference"/>
      <meta name="robots" content="index,follow"/>
      <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
      <link rel="icon" href="/logos/sitelogo1.svg" type="image/svg+xml">
      <meta name="description" content="By Arthur Golubev 19850316 (ArthurGolubev19850316) reference on multithreading."/>
      <meta name="changed" content="2025-03-06T18:00:00"/>
  </head>
  <body lang="en-US" link="#000080" vlink="#800000" dir="ltr">
	  <header>
		  Site path links list: 
		  <a href="/">starting page of the site<a/>
		  | 
		  <a href="/educationals.htm">Educationals<a/>
		  .
	  </header>
    <p>Original Internet address of this content: <a href="www.ag85.site/educationals/references/multithreading.htm">www.ag85.site/educationals/references/multithreading.htm</a></p>
    <h1>Reference on multithreading<br/>By Arthur Golubev 19850316<br/>from 2024-11-16</h1>
	  <ul>
		  <li>
			  Downloadable documents:
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.odt">odt</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.rtf">rtf</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.pdf">pdf</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.epub">epub</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.htm">htm</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.doc">doc</a>;
			  <a target="_blank" download href="/textdocuments/Reference on multithreading by Arthur Golubev 19850316.txt">txt</a>;
		  </li>
		  <li>
			  Online documents:
			  <a target="_blank" download href="https://docs.google.com/document/d/1WWn1lmWdbcHFrzQ915M_dQhmtA781-XYOdeNLXepqoA">at Googledocs</a>;
			  <a target="_blank" download href="https://www.dropbox.com/scl/fi/snvepvb9l5sgonp7bznri">at Dropboxpaper</a>;
		  </li>
	  </ul>
	  <div id="Table of Contents1" dir="ltr">
	  <div id="Table of Contents1_Head" dir="ltr"><p style="line-height: 100%; margin-top: 0.17in; margin-bottom: 0.08in; page-break-after: avoid">
		  <font face="Liberation Sans, sans-serif"><font size="4" style="font-size: 16pt"><b>Table
		  of Contents</b></font></font></p>
	  </div>
	  <p style="line-height: 100%; margin-bottom: 0in"><a href="#__RefHeading___Toc77_89898606">1:
	  Threads	1</a></p>
	  <p style="line-height: 100%; margin-bottom: 0in"><a href="#__RefHeading___Toc93_89898606%20Copy%201">2:
	  Things to consider on multithreading	2</a></p>
	  <p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc81_89898606">2.1: Keeping correctness of
	  data when multithreading	2</a></p>
	  <p style="line-height: 100%; margin-left: 0.39in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc83_89898606">2.1.1: Problem of
	  nonatomicity of operations	2</a></p>
	  <p style="line-height: 100%; margin-left: 0.39in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc85_89898606">2.1.2: Avoiding
	  incompatible accesses	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.59in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc823_89898606%20Copy%201">2.1.2.1: Making
	  an operation atomic	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.79in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc823_89898606">2.1.2.1.1: Flagging that
	  blocking operation is in progress	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.79in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc825_89898606">2.1.2.1.2: Barriering sets
	  of commands	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.59in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc91_89898606">2.1.2.2: Different levels
	  of granularity of atomicity	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.59in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc89_89898606">2.1.2.3: Replacing pointer
	  trick	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc899_3561902385">2.2: Thread pools	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc95_89898606">2.3: Cachefriendliness	3</a></p>
	  <p style="line-height: 100%; margin-left: 0.2in; margin-bottom: 0in">
	  <a href="#__RefHeading___Toc901_3561902385">2.4: Storages for
	  exchanging data among threads	4</a></p>
  </div>
    <p style="line-height: 100%; margin-bottom: 0in"><br/>

    </p>
    <h1 class="western"><a name="__RefHeading___Toc77_89898606"></a>1:
    Threads</h1>
    <p>Every program is a set of commands which also can be called
    instructions; for example, to calculate something, to signal to a
    device, to read from a channel. Diverse apparatuses can have very
    diverse supported commands but it doesn’t change that in general
    not all of actions can happen simultaneously; for example calculating
    a result must occur before providing the result to an output device.
    So some parts of programs are sequences of commands which by their
    nature are to be performed in a certain order. If any parts of a
    program contain commands that can be performed simultaneously, for
    example providing result of previous calculations to an output device
    and next  calculations, it can be considered as a specific parallel
    part of commands sequence so that program stay be a sequence of
    commands. Such sequences of programs are called threads. In general
    there are some associated with currently being performed thread
    resources, for example fast memory using by currently being performed
    thread or security access information for the threads; which means
    that a thread can switch flows of commands keeping associations with
    the resources which in turn is that you can consider a thread as a
    flow of commands associated with a set of designated for performing
    commands resources.</p>
    <p>So word threads can be used for three being executed sequences of
    programs, sequences of command sets of stored programs and entities
    with which resources for performing commands are associated.</p>
    <p>Threads are performed by apparatuses from which it follows that
    performing of commands of threads simultaneously besides by logic of
    the commands is limited by what parts of threads can be done
    simultaneously by apparatuses. Because in general parts of multiple
    threads can’t be performed simultaneously in general there is some
    dispatching of currently being performed commands, in another word of
    threads. This dispatching depends on:</p>
    <p>- how commands (note commands of multiple threads can depend on
    each other too) depend on each other;</p>
    <p>- what apparatuses can perform simultaneously.</p>
    <p>Threads dispatching can be done by:</p>
    <p>- threads themselves;</p>
    <p>- either hardware or operating system.</p>
    <h1 class="western"><a name="__RefHeading___Toc93_89898606 Copy 1"></a>
    2: Things to consider on multithreading</h1>
    <h2 class="western"><a name="__RefHeading___Toc81_89898606"></a>2.1:
    Keeping correctness of data when multithreading</h2>
    <h3 class="western"><a name="__RefHeading___Toc83_89898606"></a>2.1.1:
    Problem of nonatomicity of operations</h3>
    <p>When multiple threads operate with the same data there is a
    problem that in general data operations are not atomic. Atomicity of
    an operation is that it cannot be broken into parts. In the following
    example of corruption because of absence of atomicity will be used
    term byte, word byte means three a portion of information that has
    its own address, a value of a portion of information that has its own
    address and size of portions of information that have their own
    addresses in a system. In the example of corruption because of
    absence of atomicity word byte is used in both the first and the
    second meanings. For example of corruption because of absence of
    atomicity imagine that a program of multiple threads is operating
    with a value of two bytes so that base of the first byte is 256 and
    base of the second byte is 1 and resulting value is sum of (value of
    the first byte * 256) and (value of the second byte * 1) and the
    initial values of the bytes are  2 and 3 which for the program means
    2 for base 256 and 3 for base 1 which means value (256*2)+(3*1)=515
    and a situation that one of threads is reading the bytes and other is
    changing so that to a moment of time the first of the threads has
    read the first byte and the second of the threads changed both bytes
    to 0 that is value 0 of the variable, completing of the operations is
    the first of the threads reads the second byte so that for it the
    bytes values will be 256 and 0 which means value (256*2)+(0*1)=512
    which is neither initial, 515, nor set by the second of the threads 0
    value. In case we are working from multiple threads with the same
    value the only way to avoid corrupting values because operations can
    be broken into parts is to avoid any other operations while
    performing changing value operations.</p>
    <h3 class="western"><a name="__RefHeading___Toc85_89898606"></a>2.1.2:
    Avoiding incompatible accesses</h3>
    <h4 class="western"><a name="__RefHeading___Toc823_89898606 Copy 1"></a>
    2.1.2.1: Making an operation atomic</h4>
    <h5 class="western"><a name="__RefHeading___Toc823_89898606"></a>2.1.2.1.1:
    Flagging that blocking operation is in progress</h5>
    <p>The one way of avoiding any other operations while performing
    changing value operation is just to deny the other operations while
    performing changing value operation. Setting state that a changing
    value operation is going to be performed means that you change some
    value and so that there is guarantee that in turn this value is read
    correctly there must be a guarantee by the system that the setting
    state is atomic operation. An atomicity of an operation can be
    realized in two ways:</p>
    <p> - a system explicitly blocks other operations with the value;</p>
    <p> - naturally atomic operation is used (for example transferring
    through a single possible path).</p>
    <h5 class="western"><a name="__RefHeading___Toc825_89898606"></a>2.1.2.1.2:
    Barriering sets of commands</h5>
    <p>Another way of avoiding any other operations while performing
    changing value operation is to create barriers for commands so that
    other operation commands start only after the changing value
    operation has completed; this way requires explicit support by a
    system.</p>
    <h4 class="western"><a name="__RefHeading___Toc91_89898606"></a>2.1.2.2:
    Different levels of granularity of atomicity</h4>
    <p>When preventing incompatible access you protect the value, the
    part of the storage of the value or the whole storage of the value;
    it may be cheaper for a system to protect larger than the value
    itself part of the data.</p>
    <h4 class="western"><a name="__RefHeading___Toc89_89898606"></a>2.1.2.3:
    Replacing pointer trick</h4>
    <p>When you blocks other operations it may be not desired that other
    threads wait for ending of the blocking; there is a way which may be
    acceptable and cheaper or faster for a system of working with the
    data through a pointer and changing copy of the data and after
    changes have been complete to switch the pointer to the changes
    instance; so other threads would be able to read through a pointer an
    instance of data while another instance is being changed yet which is
    would be able not wait until changing operation on the whole data is
    completed but only for changing the pointer.</p>
    <h2 class="western"><a name="__RefHeading___Toc899_3561902385"></a>2.2:
    Thread pools</h2>
    <p>When a program creates and deletes threads it has its cost and
    when system switch from running one thread to running another one it
    has its costs too. It may be cheaper or faster to switch your threads
    from one set of commands to another without recreating threads and it
    may be cheaper and faster to bind your threads to system resources to
    avoid system switches among threads.</p>
    <h2 class="western"><a name="__RefHeading___Toc95_89898606"></a>2.3:
    Cachefriendliness</h2>
    <p>Word cache means two data copied from an initial storage so that
    information of the data can be accessed cheaper without reading from
    initial storage so that the data access is cheaper or faster and
    storage for such data. Sometimes caching is organized so that data is
    replaced by portions of certain size; for example, a cache is divided
    into portions of 8 bytes and you have one variable which was placed
    into the first 4 bytes of the cache portion and another variable
    which was placed into the second 4 bytes of the cache portion, when
    you update one of the variable the whole cache portion is being
    updated and if another threads is programmed to operates with another
    variable it needs to wait until the cache portion is updated for
    accessing that another variable. 
    </p>
    <p>The trick you can perform by cost of additional cache memory usage
    is aligning a variable to take place of the whole portion which
    forces to place any other variables in other cache portions; so
    updating this variable won’t retain operating with other variables.</p>
    <h2 class="western"><a name="__RefHeading___Toc901_3561902385"></a>2.4:
    Storages for exchanging data among threads</h2>
    <p>When a thread is intended to provide data to another thread or get
    data from another thread it is reasonable to create a storage for
    exchanging data among the threads so that no need to wait each
    other’s participation in the processes of reading and writing.</p>
    <p style="line-height: 100%; margin-bottom: 0in"><br/></p>
  </body>
</html>
